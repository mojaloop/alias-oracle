# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1


orbs:
  docker: circleci/docker@1.5.0
  slack: circleci/slack@3.4.2


defaults_Dependencies: &defaults_Dependencies |
  apk --update --no-cache add \
    git \
    ca-certificates \
    curl \
    openssh-client \
    -t build-dependencies make gcc g++ python python3 libtool autoconf automake
  npm config set unsafe-perm true
  npm install -g node-gyp

defaults_license_scanner: &defaults_license_scanner
  name: Install and set up license-scanner
  command: |
    git clone https://github.com/mojaloop/license-scanner /tmp/license-scanner
    cd /tmp/license-scanner && make build default-files set-up


executors:
  default-docker:
    working_directory: /home/circleci/project/git
    docker:
      - image: node:lts-alpine

  default-machine:
    working_directory: /home/circleci/project/git
    machine:
      image: ubuntu-2004:202010-01


jobs:
  setup:
    executor: default-docker
    steps:
      - checkout
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - run:
          name: Update NPM install
          command: npm install
      - run:
          name: Delete build dependencies
          command: apk del build-dependencies
      - save_cache:
          key: dependency-cache-v4-{{ checksum "package-lock.json" }}
          paths:
            - node_modules

  test-unit:
    executor: default-docker
    steps:
      - checkout
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - restore_cache:
          keys:
          - dependency-cache-v3-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run:
          name: Execute unit tests
          command: npm test
      - store_test_results:
          path: /home/circleci/project/git/src/
      - store_artifacts:
          path: /home/circleci/project/git/src/junit.xml

  test-integration:
    executor: default-machine
    steps:
      - checkout
      - run:
          name: Install Docker Compose
          command: |
            curl -L https://github.com/docker/compose/releases/download/1.25.0/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose
      - run:
          name: Start docker-compose
          command: docker-compose -f docker-compose.yml -f docker-compose.integration.yml up -d
      - run:
          name: Execute integration tests
          command: docker exec -it scheme-adapter-int sh -c 'npm run test:int'
      - run:
          name: Copy results from docker
          command: docker cp scheme-adapter-int:/src/junit.xml .
      - store_test_results:
          path: /home/circleci/project/git
      - store_artifacts:
          path: /home/circleci/project/git/junit.xml

  lint:
    executor: default-docker
    steps:
      - checkout
      - restore_cache:
          keys:
          - dependency-cache-v3-{{ checksum "package-lock.json" }}
      - run:
          name: Execute linting
          command: npm run lint

  audit-licenses:
    executor: default-docker
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - run:
          <<: *defaults_license_scanner
      - checkout
      - restore_cache:
          key: dependency-cache-v3-{{ checksum "package-lock.json" }}
      - run:
          name: Run the license-scanner
          command: cd /tmp/license-scanner && pathToRepo=$CIRCLE_WORKING_DIRECTORY make run
      - store_artifacts:
          path: /tmp/license-scanner/results
          prefix: licenses

  build:
    executor: default-machine
    steps:
      - checkout
      - run:
          name: Build Docker local image
          command: |
            echo "Building Docker image: local"
            docker build -t $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME:local .
      - run:
          name: Save docker image to workspace
          command: docker save -o /tmp/docker-image.tar $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME:local
      - persist_to_workspace:
          root: /tmp
          paths:
            - ./docker-image.tar


workflows:
  build_and_test:
    jobs:
      - setup:
          context: wmt
          filters:
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
                - /hotfix*/
      - build:
          context: wmt
          filters:
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
                - /hotfix*/
